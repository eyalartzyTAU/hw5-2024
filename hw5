import pandas as pd
import numpy as np
import pathlib
import json
import matplotlib.pyplot as plt
from typing import Union, Tuple


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        # Ensure that data_fname is a pathlib.Path object
        self.data_fname = pathlib.Path(data_fname)
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        # Check if file exists and is readable
        if not self.data_fname.is_file():
            raise ValueError(f"File {self.data_fname} does not exist.")

        # Read the JSON data into a DataFrame
        with open(self.data_fname, "r") as f:
            self.data = pd.DataFrame(json.load(f))

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
        """
        # Drop non-numeric and NaN ages
        ages = pd.to_numeric(self.data["age"], errors="coerce").dropna()

        # Calculate age distribution
        bins = np.arange(0, 101, 10)
        hist, bins = np.histogram(ages, bins=bins)

        # Plot the distribution
        plt.hist(ages, bins=bins, edgecolor="black")
        plt.title("Age Distribution")
        plt.xlabel("Age")
        plt.ylabel("Number of Participants")
        plt.show()

        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
          A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
          the (ordinal) index after a reset.
        """

        def is_valid_email(email: str) -> bool:
            """Checks if an email address is valid based on specified rules."""
            if "@" not in email or "." not in email:
                return False
            if email.startswith("@") or email.endswith("@"):
                return False
            if email.startswith(".") or email.endswith("."):
                return False
            if email[email.index("@") + 1] == ".":
                return False
            return True

        # Filter the DataFrame for valid emails
        valid_email_mask = self.data["email"].apply(is_valid_email)
        df = self.data[valid_email_mask].reset_index(drop=True)

        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
          The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
              Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        corrected_indices = []

        # Identify question columns (assuming they are named q1, q2, ..., q5)
        question_columns = [col for col in df.columns if col.startswith('q')]

        # Replace NaNs with the mean of other grades in the same row
        for i, row in df.iterrows():
            if row[question_columns].isnull().any():
                row_mean = row[question_columns].mean()
                df.loc[i, question_columns] = row[question_columns].fillna(row_mean)
                corrected_indices.append(i)

        return df, np.array(corrected_indices)

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data.copy()
        question_columns = [col for col in df.columns if col.startswith('q')]
        scores = []

        for _, row in df.iterrows():
            row_numeric = pd.to_numeric(row[question_columns], errors='coerce')
            num_nans = row_numeric.isnull().sum()

            if num_nans > maximal_nans_per_sub:
                scores.append(pd.NA)
            else:
                mean_score = np.floor(row_numeric.mean(skipna=True))
                scores.append(int(mean_score) if not pd.isna(mean_score) else pd.NA)

        df["score"] = pd.Series(scores, dtype="UInt8")

        return df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        df = self.data.copy()

        # Convert age to numeric, ignore errors
        df["age"] = pd.to_numeric(df["age"], errors="coerce")

        # Create a new age group column
        df["age_group"] = df["age"].apply(lambda age: "above_40" if age > 40 else "below_40")

        # Set MultiIndex
        df.set_index(["gender", "age_group"], inplace=True)

        # Identify question columns for grouping
        question_columns = [col for col in df.columns if col.startswith('q')]

        # Calculate mean for each question, ignore non-numeric columns
        grouped = df.groupby(["gender", "age_group"])[question_columns].mean()

        return grouped


# Correct the read_data to raise a ValueError if the file is missing.
try:
    q = QuestionnaireAnalysis("teststs.fdfd")
    q.read_data()
except ValueError:
    print("Caught ValueError for missing file as expected.")
